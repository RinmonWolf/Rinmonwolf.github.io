<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo + Github = 年轻人的第一个博客</title>
      <link href="/2021/10/21/jian-zhan-guo-cheng-ji-lu/"/>
      <url>/2021/10/21/jian-zhan-guo-cheng-ji-lu/</url>
      
        <content type="html"><![CDATA[<p>这篇文章就简要记录下本站建立的过程。</p><p>因以这种方式搭建是相对自由、简单、便宜（不用为托管付费，除非你弄着弄着生气砸了键盘可能就贵了）的。我就大胆叫了个“年轻人的第一个博客”。</p><p>首先声明：本文前半部分（建站）参考<a href="https://zhuanlan.zhihu.com/p/37826880">十分钟建好托管在GitHub上的个人网站</a>撰写，非常感谢此文在我建立本站时提供的帮助。如我有部分说的不详尽的地方也希望大家优先参考这篇文章。</p><hr><h2 id="放在前面"><a href="#放在前面" class="headerlink" title="放在前面"></a>放在前面</h2><p>首先介绍一下<a href="https://hexo.io/">Hexo</a>和<a href="GitHub.com">Github</a>是个啥。</p><p>Hexo，官网介绍其是快速、简洁、高效的博客框架。事实也证明，相比我之前使用的WordPress，Hexo在部署、文件处理上明显更高效。选用其也是因为其使用者较多，出现问题寻找解决方案也相对容易。<del>（其实就是因为我第一个搜到了Hexo所以就用了）</del></p><p>Github，一个代码托管平台。其功能繁多，用户颇多。此处我们使用的是其网站托管服务（是这么叫吧？）。需要注意的是，本服务只能托管静态网页，就是说你不能在博客里对博客进行修改（无论页面样式还是文章）。一般来说只能在部署设备上进行对博客的修改。曲线救国的方式就是在Github上添加文章，当然请记得保存好文件，等到能够使用部署的设备上时重新放进去。</p><p>至于效果，就是这个博客了。</p><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>物理上，请准备：</p><ul><li><p>一个可联网、使用浏览器的设备（通俗说法：手机电脑都可以，拿来登录和测试仓库网站）</p></li><li><p>一个准备部署本地博客的设备（通俗说法：最好是电脑，你手机有终端能装ARM版的Node.js、Git理论也行，但是可能写博客没电脑那么方便，毕竟还要处理图片啥的）</p><p>当然，上面两个可以是同一台设备。当然如果你想分开也是没问题的。</p></li></ul><p>心理上，请准备：</p><ul><li>随时重来</li><li>细心</li><li>在搜索引擎搜索本文没有提到的问题之解决方案</li></ul><hr><h2 id="本地工作"><a href="#本地工作" class="headerlink" title="本地工作"></a>本地工作</h2><p>我们先准备好本地的Hexo，之后会推到云端上。</p><h3 id="下载Hexo……之前？"><a href="#下载Hexo……之前？" class="headerlink" title="下载Hexo……之前？"></a>下载Hexo……之前？</h3><p>是的，下载Hexo之前，我们还需要安装两个工具才能继续工作。</p><p>这两个工具是<a href="https://nodejs.org/en/"><strong>Node.js</strong></a>和<a href="https://git-scm.com/"><strong>Git</strong></a>，前者是JavaScript运行环境，后者是一个分布式版本控制系统（吧？）。在我所使用的macOS上后者已经存在。此处简单介绍一下如何安装这两个应用。</p><p>在下载之前，最好使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> --version<span class="token comment"># 查看npm的版本</span><span class="token function">git</span> --version<span class="token comment"># 查看git的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或其他方式确认是否已经安装。如未安装，请往下看。</p><p><img src="/media/images/BuildWeb/01.png" alt="像我这样就是安装好了"></p><p>首先下载Node.js。点击上面的超链接，进入Node.js的主页。如果页面正确显示了你的系统，就按下左边的适用大多数用户的版本的下载按钮即可。如有需要可以选择右边的版本。</p><p><img src="/media/images/BuildWeb/02.png" alt="Node.js"></p><p>下载后手动安装即可。</p><p>此处方法是手动下载安装包。<a href="https://clwy.cn/video/chapters/node-express-nvm/info">有博主说</a>这样安装会导致换版本较困难。如果你想解决这个问题，可以使用nvm安装。</p><p>如果你想使用nvm安装，建议参考<a href="https://zhuanlan.zhihu.com/p/37826880">十分钟建好托管在GitHub上的个人网站</a>。我用的是安装包安装所以没有尝试。</p><p>而后安装Git，如已安装则可跳过此步。同样点击上面的超链接进入Git主页，随后选择Download，按照提示操作（如有）即可。</p><p><img src="/media/images/BuildWeb/03.png" alt="Git"></p><p>重新运行上面的指令，如果都弹出版本信息了的话，两个工具就安装成功了。</p><h3 id="下载并部署Hexo"><a href="#下载并部署Hexo" class="headerlink" title="下载并部署Hexo"></a>下载并部署Hexo</h3><p>接下来下载Hexo。在任意位置的终端输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span class="token comment"># 使用npm安装hexo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等待进度条走完就下载成功了。</p><p><img src="/media/images/BuildWeb/04.gif" alt="下载Hexo"></p><p>然后，找一个你喜欢的位置建立一个任意名字的新文件夹来放置你的本地网站并在终端进入。用访达/资源管理器等GUI建立大概率是没问题的。</p><p>下面，提供一个使用纯终端建立位于用户文件夹下的Hexo文件夹的指令范例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span class="token comment"># 查看当前目录有什么文件夹以确认当前目录，虽然通常user@computer folder也会告诉你现在在哪</span><span class="token function">mkdir</span> hexo<span class="token comment"># 因为macOS终端默认就位于用户文件夹下，所以无需切换目录。如果需要切换到如Document、Desktop等文件夹下，可使用cd Document或cd Desktop切换。</span><span class="token builtin class-name">cd</span> hexo<span class="token comment"># 进入hexo文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/media/images/BuildWeb/05.png" alt="建立hexo文件夹"></p><p>这样，文件夹就建立好了。</p><p><img src="/media/images/BuildWeb/06.png" alt="hexo文件夹"></p><p>如果你选择使用GUI建立文件夹，亦可按照以下步骤进行。</p><ol><li><p>在你想要的地方建立hexo文件夹；</p></li><li><p>在终端输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token comment"># 此处cd后面有空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>后将文件夹拖进终端</p></li></ol><p><img src="/media/images/BuildWeb/07.gif" alt="GUI建立hexo文件夹"></p><p>现在，你已经在终端中进入了hexo文件夹，接下来就是将Hexo安装进去了。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在hexo目录下输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init<span class="token function">npm</span> <span class="token function">install</span><span class="token comment"># 安装Hexo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/media/images/BuildWeb/08.gif" alt="安装Hexo"></p><p>此时在hexo文件夹可以看到Hexo的文件已经被安装进来了。</p><p><img src="/media/images/BuildWeb/09.png" alt="现在的hexo目录"></p><p>接下来，继续输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo g <span class="token comment"># 让Hexo生成静态网页，此处指令为简写</span>hexo s<span class="token comment"># 启动Hexo本地服务器，同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/media/images/BuildWeb/10.gif" alt="生成网页"></p><p><img src="/media/images/BuildWeb/17.png" alt="运行中的本地Hexo服务器"></p><p>然后，你会在终端窗口看到一个链接<a href="http://localhost:4000。打开这个链接，你就能看到部署在你本地设备上的网站了！">http://localhost:4000。打开这个链接，你就能看到部署在你本地设备上的网站了！</a></p><p><img src="/media/images/BuildWeb/11.png" alt="你的Hexo网站"></p><hr><h2 id="线上工作"><a href="#线上工作" class="headerlink" title="线上工作"></a>线上工作</h2><p>然后，我们开始着手云端的工作。</p><h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>首先，我们需要<a href="github.com">Github</a>的托管服务，那么就需要一个Github的账号。如果有了就跳到建立仓库页面。</p><p>点击上面的超链接进入Github官网，点击右上角的Sigh Up进入注册页面，随后跟着提示走（不会英文可以用翻译器）即可。</p><p><img src="/media/images/BuildWeb/12.png" alt="注册好的账号应该长这样"></p><h3 id="建立你的仓库"><a href="#建立你的仓库" class="headerlink" title="建立你的仓库"></a>建立你的仓库</h3><p>随后点击右上角你的头像，在点击Your repositories进入你的仓库页面。</p><p><img src="/media/images/BuildWeb/13.png" alt="点击Your repositories"></p><p><img src="/media/images/BuildWeb/14.png" alt="我的仓库页面长这样"></p><p>随后点击右上角New，新建一个仓库。</p><p>Repository name需要填写成你的用户名.github.io的格式。否则将会面临需要子页面才能访问仓库网页的问题。</p><p>这里因为我有一个仓库了，先用YuanXH给大家做示范。</p><p>填写好名字后点击Create repository即可。</p><p><img src="/media/images/BuildWeb/15.png" alt="就填个名字就行"></p><p>接下来你就进到了你这个仓库的主页。</p><p><img src="/media/images/BuildWeb/16.png" alt="仓库主页"></p><h3 id="用SSH钥匙以方便的推送网站"><a href="#用SSH钥匙以方便的推送网站" class="headerlink" title="用SSH钥匙以方便的推送网站"></a>用SSH钥匙以方便的推送网站</h3><p>接下来，我们根据<a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh">Github官方给出的SSH相关说明</a>生成并让电脑与Github进行连接。</p><p>（写着写着发现自己真的抄所以就没继续写了……）</p><p>完成上述步骤后，打开你的Hexo文件夹，找到_config.yml文件。</p><p><img src="/media/images/BuildWeb/18.png" alt="hexo文件夹中的config文件"></p><p>打开它。翻到文件末尾（一般是）找到deploy父设置项。</p><p>按照下列范例填写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:用户名/用户名.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中请注意：</p><ul><li>父设置项冒号后面可以没有空格；</li><li><strong>子设置项冒号后面必须有空格</strong>。</li><li><em><strong>因为是子设置项，<a href="https://www.jianshu.com/p/0ab9c55a9ee2">请在前面放置一到两个空格避免出现错误</a>。</strong></em></li><li>Repository链接可以拷贝你在GitHub仓库中Quick Setup的SSH链接。</li></ul><p><img src="/media/images/BuildWeb/19.png" alt="SSH链接"></p><p><img src="/media/images/BuildWeb/20.png" alt="写好应该是这样的"></p><p>此时，如果你想顺便改下名字啥的，没有问题。但是请按照规范/暂时不改。如果真的想改，请跳转到本文的网站基础设置段。</p><h3 id="部署网站到仓库"><a href="#部署网站到仓库" class="headerlink" title="部署网站到仓库"></a>部署网站到仓库</h3><p>接下来，如果你刚刚的终端没关上，那太好了；甚至如果你没关上服务，那你现在应该按Ctrl+C（这是我的macOS上出现的，请根据终端内文字提示按，不要乱按）退出本地网站服务。</p><p>在终端内输入（记得在hexo文件夹，我就是因为没有在文件夹里安装导致在电脑不知名的角落留下了很多安装残留垃圾）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span class="token comment"># 安装SSH部署服务</span>hexo d<span class="token comment"># 让hexo部署到仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/media/images/BuildWeb/21.gif" alt="部署成功"></p><p>此时，你应该能在你的仓库里看到你部署上去的网页文件了。</p><p><img src="/media/images/BuildWeb/22.png" alt="仓库现在的样子"></p><h3 id="最后的步骤"><a href="#最后的步骤" class="headerlink" title="最后的步骤"></a>最后的步骤</h3><p>跟着我们检查设置。点按仓库网页中仓库名字下的Settings。</p><p>如果没错的话，你进到了这个页面。</p><p><img src="/media/images/BuildWeb/23.png" alt="仓库设置"></p><p>在左边侧边栏找到Pages，点进去。随后点击页面中Source下的下拉框，选择master后按下Save保存。</p><p><img src="/media/images/BuildWeb/24.png" alt="设置GitHub Pages访问master"></p><p>如果需要其他链接访问，请阅读</p><p>接下来，不出意外的话，点击页面上</p><blockquote><p>Your site is ready to be published at https://用户名.github.io/</p></blockquote><p>中的链接就可以看到你刚刚在本地看到的一样的网页了。</p><p><img src="/media/images/BuildWeb/25.png" alt="出来ㄌ……？为啥没有样式了！"></p><p>如果是404，那么请检查上面步骤任何一点，特别特别特别是<strong>大小写、缩进、Git链接正确与</strong>等问题。</p><p>如果发现链接变成了https://用户名.github.io/XXX.github.io，那你大概率要检查一下你<strong>仓库的用户名有没有写对</strong>了，我就因为把n打成m调试了将近半小时多还请教Kineks（请见友情链接列表）才发现是仓库名字的问题……只不过用此方法可以在子页面实现一个账户多个网站的效果，按需使用啦。</p><p>如果发现<a href="https://blog.csdn.net/weixin_45106105/article/details/107199231">文字出来了但是图片、页面样式什么的都不见了（如上图）</a>也不用害怕，我们接下来就处理这个。 </p><hr><h2 id="网站基础设置"><a href="#网站基础设置" class="headerlink" title="网站基础设置"></a>网站基础设置</h2><p>现在，我们开始继续改动Hexo的config。</p><p>但在此之前，我还是想说几句：</p><ul><li>请尽量做三五行的改动就进行备份或者运行确认没问题后再进行改动，这对新手至关重要。</li><li>用英文输入法是最好的，因为可能就一个标点导致了服务错误。</li><li>请注意缩进的问题。有些缩进可能靠足量的空格，可能靠Tab缩进符。请按需使用。</li><li>除了必要测试，<strong>千万不要每试验一次就往服务器上怼</strong>，免费服务不是让你这样玩的，一小时超过十次的话GitHub也会过来问你怎么回事的。</li></ul><p><strong>我们现在看到Site设置，也就是第二个选项块（一般来说。第一个是介绍文档的链接。你当然也可以去看这个。）</strong></p><p>title就是你的网站名字了，按你的想法填写。</p><p>subtitle顾名思义是副标题，按需填写。</p><p>description是网页描述，官网文档建议包含网站关键词。</p><p>keywords是网页搜索的关键词，按需求写。</p><p>author就是你——作者了，建议写上。</p><p>language是语言，一般推荐填写你使用的语言，中文简体需要填写zh-CN，中文繁體（正體）需要填寫zh-Hans。</p><p>timezone是网站显示的时区，千万别填写什么Beijing（<a href="https://www.cnblogs.com/mmzuo-798/p/10510225.html">有博主就这样写了</a>）、CST，我就吃了这个亏导致差点找不到问题怎么解决。中国（上海）时区需要填写Asia/Shanghai，其他时区请参考<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">这里（英文维基）</a>。</p><p>‘’应该表示留空，反正你需要留空的打个这个上去吧（因为我也是这样的目前没发现问题）。</p><p><img src="/media/images/BuildWeb/26.png" alt="Site设置范例"></p><p><strong>然后我们看到URL——第三个选项块。</strong></p><p>请一定一定注意此处的设置。这就是决定你网页有没有样式的重中之重了。</p><p>拷贝你的网站链接，按照下列格式填写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//用户名.github.io/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，如果你的网站在子目录，则需要这样填写：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//用户名.github.io/仓库名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后再添加一行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">root</span><span class="token punctuation">:</span> /仓库名/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可。</p><p><img src="/media/images/BuildWeb/27.png" alt="URL设置范例"></p><p>保存，并且重新部署</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token comment"># 清除文件并部署</span>hexo s<span class="token comment"># 打开本地服务进行本地测试</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/media/images/BuildWeb/28.png" alt="本地测试成功"></p><p>接下来，我们：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span class="token comment"># 部署到仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>稍等几分钟，我们即可在云端页面看到我们刚刚做的更改了。</p><p><img src="/media/images/BuildWeb/29.png" alt="云端测试成功"></p><hr><h2 id="开始写我们的第一篇文章"><a href="#开始写我们的第一篇文章" class="headerlink" title="开始写我们的第一篇文章"></a>开始写我们的第一篇文章</h2><p>终于，我们的网站初见雏形，接下来就可以开始往里面放置内容了。</p><p>如果你想对网站进行美化，可以在<a href="https://hexo.io/themes/">官网</a>查找或在搜索引擎搜索hexo主题或者查看本站的主题<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>。</p><h3 id="新建贴文"><a href="#新建贴文" class="headerlink" title="新建贴文"></a>新建贴文</h3><p>首先，依然需要一个hexo目录下的终端。输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo n <span class="token string">"新博客"</span><span class="token comment"># 新建一个名为新博客的博客贴文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以新建博客。</p><p><img src="/media/images/BuildWeb/30.png" alt="新建博客贴文 "></p><p>随后我们可在hexo目录下的source/_posts找到这个文件</p><p><img src="/media/images/BuildWeb/31.png" alt="“新博客”文件"></p><h3 id="介绍MarkDown"><a href="#介绍MarkDown" class="headerlink" title="介绍MarkDown"></a>介绍MarkDown</h3><p>可以看到，Hexo使用MarkDown格式的文件作为贴文文件。这种格式使用纯文本记录富文本样式，并在特定编辑器/阅读器生效。简单来说，就是平常用的TXT，它能加粗、倾斜字体，并给字体添加标题样式、下划线/删除线效果了。但是如果这时候你用普通文本编辑器打开默认的hello-world贴文的话……</p><p><img src="/media/images/BuildWeb/32.png" alt="会是这样的"></p><p>为什么和你在网站上看到的不一样呢？</p><p>没错，这些“###”之类的便是MarkDown给文字添加格式的关键了。这样，不需要用doc、wps等格式的文件也能让网站丰富多彩了。</p><p>那么，该怎么编辑、怎么看到效果呢？</p><p>这里推荐两个东西，一个是<a href="https://www.jianshu.com/p/f378e3f2e7e1">MarkDown语法示例</a>，一个是<a href="https://typora.io/">Typora</a>。前者提供语法示例，参考其作文即可；后者是一个好看好用上手快界面简洁的MarkDown编辑软件，我就正在用这个软件编写这篇文章。</p><p><img src="/media/images/BuildWeb/33.png" alt="我的Typora"></p><h3 id="我为什么推荐Typora"><a href="#我为什么推荐Typora" class="headerlink" title="我为什么推荐Typora"></a>我为什么推荐Typora</h3><p>这里着点笔墨讲下为什么我推荐用Typora（虽然我没怎么用过其他的，欢迎有其他推荐）。</p><p>我在用这个软件的时候没有什么花里胡哨的功能，一开始甚至只有一个Notepad一样的窗口给你，还是我后来才打开侧边文档列表/大纲功能。</p><p>那怎么看到自己的文本样式呢？你只要写好样式，输入/点击下一个字就会自动生效。简单、不失优雅。</p><p>而在我记忆里，有一个MD编辑器用的是双窗形式——左边源代码右边格式预览。这样做当然有它的好处，但对我来说，我更愿意眼睛一直盯着同一个窗口不用挪开。</p><p>并且实际上，如果你愿意的话你依然可以查看源代码，不熟悉MD的情况下在段落、格式找到自己想要的功能。</p><p>这可能是我遇到过目前最舒适的写作软件。</p><h3 id="编写贴文"><a href="#编写贴文" class="headerlink" title="编写贴文"></a>编写贴文</h3><p>回到正题，现在你应该已经有了自己的MD编辑器了，或者说，你如果愿意不做格式/直接脑补格式，这样的话你用Notepad就够了。</p><p>打开新博客贴文文件，我们可以看到如图的内容：</p><p><img src="/media/images/BuildWeb/34.png" alt="新博客贴文的初始状态"></p><p>其中，文件开头灰色的内容叫Front-matter，可以参考<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">Matery主题的Readme-CN</a>进行修改。</p><p>这里提供一个我使用的范例。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token font-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 这是一个标题<span class="token key atrule">date</span><span class="token punctuation">:</span> 2021<span class="token punctuation">-</span>10<span class="token punctuation">-</span>21 HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> &lt;<span class="token tag">!--</span> 是否在置顶推荐中显示，部分主题支持 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>&lt;<span class="token tag">!--</span> 是否在主页文章中隐藏，部分主题支持 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>&lt;<span class="token tag">!--</span> 是否在一屏轮播中显示，部分主题支持 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> Started&lt;<span class="token tag">!--</span> 文章分类，部分主题支持 <span class="token punctuation">-</span><span class="token punctuation">-</span><span class="token punctuation">&gt;</span><span class="token key atrule">tags</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> 标签1  <span class="token punctuation">-</span> 标签2</span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为我也不知道注释行不行，所以不推荐把我的注释一起写进去，仅供参考用。</p><p>接下来，开始编写我们博客的内容。</p><p>这里提供一个写好的范例，仅供参考。</p><p><img src="/media/images/BuildWeb/35.png" alt="摸"></p><p><img src="/media/images/BuildWeb/36.png" alt="摸鱼的核心"></p><p>如图我们可见<del>摸鱼对人类的重要性</del>大体的MD格式如何。其中六个标题在部分主题中就可以大纲的形式出现，让用户快速定位内容。</p><p>接下来，我们在网页上看看效果如何。</p><p><img src="/media/images/BuildWeb/37.png" alt="所见即所得"></p><p>这样，你的第一篇博客，就成功的写出来了！</p><h3 id="剩下的问题"><a href="#剩下的问题" class="headerlink" title="剩下的问题"></a>剩下的问题</h3><p>如继续美化、添加插件、进阶编辑等，我在这里贴几个网址按需阅读吧。</p><p><a href="https://blog.csdn.net/weixin_46622106/article/details/112059798">搭建博客hexo 安装hexo、配置hexo、hexo主题美化和添加live2d看板娘–详细步骤</a></p><p><a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/">Hexo博客搭建之在文章中插入图片</a></p><hr><h2 id="放在最后"><a href="#放在最后" class="headerlink" title="放在最后"></a>放在最后</h2><p>写了一整天才写完大致，接下来还有校对、P图等工作要做。维护博客、写贴文真的挺辛苦的。</p><p>总之，写完了，希望能帮到有需要的人。</p><p><strong>感谢你看到这里。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 初次见面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>真正的Hello World</title>
      <link href="/2021/10/21/zhen-zheng-de-hello-world/"/>
      <url>/2021/10/21/zhen-zheng-de-hello-world/</url>
      
        <content type="html"><![CDATA[<p>所以呢，这个才是我的Hello World 才对。</p><p>欢迎来到我的博客～</p><hr><h2 id="来自我介绍一下："><a href="#来自我介绍一下：" class="headerlink" title="来自我介绍一下："></a>来自我介绍一下：</h2><p>袁湘浩/RinmonWolf，一般十六岁男子。</p><p>数码/摄影/编程/陈粒，感兴趣的基本上是这些。</p><p>没有深造的东西，普普通通。</p><hr><h2 id="开博客的目的"><a href="#开博客的目的" class="headerlink" title="开博客的目的"></a>开博客的目的</h2><p>开了两次博客，前两次都是玩玩，所以基本没有什么内容。</p><p>这次呢，打算分享一些自己的学习心得，包括编程但不仅于此。</p><p>也让自己不要忘的那么快。</p><hr><h2 id="更新频率？"><a href="#更新频率？" class="headerlink" title="更新频率？"></a>更新频率？</h2><p>真的说不准，我连视频脚本都没开始写呢。</p><p><del>（跑路）</del></p><hr><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>总之，希望我的这些东西能够帮助到你，非常感谢你能够读到这篇、读完这篇文章。</p><p>祝生活不负有心人。</p>]]></content>
      
      
      <categories>
          
          <category> Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箱底 </tag>
            
            <tag> 初次见面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/10/21/hello-world/"/>
      <url>/2021/10/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>And, more settings in posts are following. </p><p>img: /source/images/xxx.jpg</p><p>coverImg: /images/1.jpg</p><p>top: false</p>]]></content>
      
      
      <categories>
          
          <category> Started </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 箱底 </tag>
            
            <tag> 新手入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
